package gts;

public class Q60_HashMapSimpleSimulation <K, V> {

    private static final int SIZE = 16; // Number of buckets
    private Entry<K, V>[] buckets;

    public MySimpleHashMap() {
        buckets = new Entry[SIZE]; // Initialize buckets
    }

    public void put(K key, V value) {
        int index = getIndex(key); // Find bucket index
        Entry<K, V> current = buckets[index];

        // If key already exists, update the value
        while (current != null) {
            if (current.key.equals(key)) {
                current.value = value;
                return;
            }
            current = current.next;
        }

        // If key not found, insert a new entry at the head of the chain
        Entry<K, V> newEntry = new Entry<>(key, value, buckets[index]);
        buckets[index] = newEntry;
    }

    public V get(K key) {
        int index = getIndex(key);
        Entry<K, V> current = buckets[index];

        while (current != null) {
            if (current.key.equals(key)) {
                return current.value;
            }
            current = current.next;
        }

        return null; // Key not found
    }

    // Calculate index using hash code
    private int getIndex(K key) {
        return Math.abs(key.hashCode()) % SIZE;
    }

    // Node class for key-value pair
    private static class Entry<K, V> {
        K key;
        V value;
        Entry<K, V> next;

        public Entry(K key, V value, Entry<K, V> next) {
            this.key = key;
            this.value = value;
            this.next = next;
        }
    }

    // Test in main method
    public static void main(String[] args) {
        MySimpleHashMap<String, String> map = new MySimpleHashMap<>();

        map.put("One", "1");
        map.put("Two", "2");
        map.put("Two", "22");
        map.put("Three", "3");

        System.out.println("One → " + map.get("One"));      // 1
        System.out.println("Two → " + map.get("Two"));      // 22
        System.out.println("Three → " + map.get("Three"));  // 3
        System.out.println("Four → " + map.get("Four"));    // null
    }
}
