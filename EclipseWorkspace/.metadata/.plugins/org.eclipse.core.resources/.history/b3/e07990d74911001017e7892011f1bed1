package gts;

import java.util.Arrays;
import java.util.Stack;

class C_NextGreaterElement {
	
	public static void main(String[] args) {
		
		attempt1();
		attempt2();
	}


	private static void attempt2() {
		int[] arr = {2, 4, 1, 3, 5};
		 int n = arr.length;
	        int[] result = new int[n];  
	        Stack<Integer> stack = new Stack<>(); 

	        // Traverse from right to left
	        for (int i = n - 1; i >= 0; i--) {
	            // Pop smaller elements from the stack
	            while (!stack.isEmpty() && stack.peek() <= arr[i]) {
	                stack.pop();
	            }

	            // If stack is empty, no greater element
	            result[i] = stack.isEmpty() ? -1 : stack.peek();
	            
	            // Push current element to stack
	            stack.push(arr[i]);
	        } 
		System.out.println(Arrays.toString(result));
		
	}

	private static void attempt1() {

		
		int[] nums = {1,3,4,1,2};
		int[] nextGreaterElements = new int[nums.length];
		Stack<Integer> helperStack=new Stack<Integer>();
		
		for(int i=nums.length-1;i>=0;i--) {
			
			int element = nums[i];
			
			if(helperStack.isEmpty()) {
				helperStack.push(element);
				nextGreaterElements[i]=-1;
				continue;
			}
			
			
			if(helperStack.peek()>element) {
				nextGreaterElements[i]=helperStack.peek();
				helperStack.push(element);
				continue;
			}
			
			while(helperStack.peek()<=element && !helperStack.isEmpty()) {
				helperStack.pop();
			}
			
			if(helperStack.isEmpty()) {
				nextGreaterElements[i]=-1;
			}
			else {
				nextGreaterElements[i] = helperStack.peek();
			}
			
			helperStack.push(element);
		}	
		
	}
}


