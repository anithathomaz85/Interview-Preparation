package gts;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 
 * Program to find sub-arrays from a given array which have the given sum Input
 * : arr = {2,4,1,3,5,1} sum=6 Output : subarrays = {2,4},{5,1}"
 */
public class Q4_Q15_Q21_Q54_Q55_Q100_Pair {

	public static void main(String[] args) {
		approch1();
		approch2();
	}

	private static void approch2() {
		int[] nums = { 2, 4, 1, 3, 5, 1 };
		int targetSum = 6;
		boolean found = false;

		Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = 0; i < nums.length; i++) {
			int complement = targetSum - nums[i];

			if (map.containsKey(complement)) {
				System.out.println("Pair found: (" + complement + ", " + nums[i] + ")");
				found = true;
			}

			map.put(nums[i], i);
		}

		if (!found) {
			System.out.println("No pairs found.");
		}

	}

	private static void approch1() {
		int[] arr = { 2, 4, 1, 3, 5, 1 };
		int targetSum = 6;

		List<List<Integer>> result = new ArrayList<>();

		for (int i = 0; i < arr.length; i++) {
			int sum = 0;
			List<Integer> subarray = new ArrayList<>();

			for (int j = i; j < arr.length; j++) {
				sum += arr[j];
				subarray.add(arr[j]);

				if (sum == targetSum) {
					result.add(new ArrayList<>(subarray));
				}
			}
		}
		System.out.println("Subarrays with sum " + targetSum + ": " + result);

	}

	/**
	 * Binary Search Time Complexity: Outer loop: O(n) Inner binary search: O(log n)
	 * Total: O(n log n)
	 */
	public class PairSumBinarySearch {
		public static void findPair(int[] nums, int target) {
			for (int i = 0; i < nums.length - 1; i++) {
				int complement = target - nums[i];
				int low = i + 1;
				int high = nums.length - 1;

				while (low <= high) {
					int mid = low + (high - low) / 2;

					if (nums[mid] == complement) {
						System.out.println("Pair found: (" + nums[i] + ", " + nums[mid] + ")");
						return;
					} else if (nums[mid] < complement) {
						low = mid + 1;
					} else {
						high = mid - 1;
					}
				}
			}
			System.out.println("No pair found for sum " + target);
		}
		
		/**
		 * Using complement technique
		 * Time Complexity: O(n)
					→ One pass through the array + constant time contains and add operations on a HashSet.
		   Space Complexity: O(n)
					→ In the worst case, all elements might be added to the seen set.
		 */
		public class PairSum {

		    // O(n) time, O(n) space — HashSet complement approach
		    private static void findPairUsingSet(int[] nums, int target) {
		        Set<Integer> seen = new HashSet<>();

		        for (int num : nums) {
		            int complement = target - num;

		            if (seen.contains(complement)) {
		                System.out.println("Pair found: (" + num + ", " + complement + ")");
		                return;
		            }

		            seen.add(num);
		        }

		        System.out.println("No pair found for sum " + target);
		    }

	}
}
