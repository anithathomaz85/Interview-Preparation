package gts;

public class Q41_SimpleHashMap <K, V> {
	
    private static final int INITIAL_CAPACITY = 16;
    private static final double LOAD_FACTOR = 0.75;
    private int size = 0;
    private Entry<K, V>[] buckets;

    public Q41_SimpleHashMap() {
        buckets = new Entry<K,V>[INITIAL_CAPACITY];
    }

    public void put(K key, V value) {
        if ((double) size / buckets.length >= LOAD_FACTOR) {
            resize();
        }
        int index = getIndex(key);
        Entry<K, V> newEntry = new Entry<>(key, value, null);

        if (buckets[index] == null) {
            buckets[index] = newEntry;
            size++;
        } else {
            Entry<K, V> current = buckets[index];
            Entry<K, V> prev = null;
            while (current != null) {
                if (current.key.equals(key)) {
                    current.value = value;
                    return;
                }
                prev = current;
                current = current.next;
            }
            prev.next = newEntry;
            size++;
        }
    }

    public V get(K key) {
        int index = getIndex(key);
        Entry<K, V> current = buckets[index];

        while (current != null) {
            if (current.key.equals(key)) {
                return current.value;
            }
            current = current.next;
        }
        return null;
    }

    private int getIndex(K key) {
        if (key == null) {
            return 0;
        }
        return Math.abs(key.hashCode()) % buckets.length;
    }

    private void resize() {
        Entry<K, V>[] newBuckets = new Entry[buckets.length * 2];
        for (Entry<K, V> entry : buckets) {
            while (entry != null) {
                int index = Math.abs(entry.key.hashCode()) % newBuckets.length;
                Entry<K, V> next = entry.next;
                entry.next = newBuckets[index];
                newBuckets[index] = entry;
                entry = next;
            }
        }
        buckets = newBuckets;
    }

    private static class Entry<K, V> {
        K key;
        V value;
        Entry<K, V> next;

        Entry(K key, V value, Entry<K, V> next) {
            this.key = key;
            this.value = value;
            this.next = next;
        }
    }
}