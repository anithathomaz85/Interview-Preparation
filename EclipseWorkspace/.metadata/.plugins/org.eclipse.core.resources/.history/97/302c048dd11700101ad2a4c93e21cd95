package gts;

/**
 * DIfference between abstract class and interface write in java code
 * */
/**
 * 
 * 	Abstract Class:
	  	Can have both abstract methods (without implementation) and concrete methods (with implementation).
		Can have instance variables.
		Can have constructors.	
		Methods can have various access modifiers (private, protected, public).	
		A class can inherit from only one abstract class (single inheritance).	
		Suitable for providing shared code among related classes.	
		Can maintain state using instance variables.	
		Can provide default method implementations.	
		Can be used to provide a common base and shared functionality for subclasses.	
		Cannot implement multiple abstract classes.	
		Allows subclassing to inherit both behaviour and state (instance variables).
 * */
interface Animal {
	// Abstract method (implicitly public and abstract)
	void sound();

	default void eat() {
		System.out.println("This animal eats food.");
	}
}

// Concrete class that implements the interface
class Dog implements Animal {
	// Implementing the abstract method
	public void sound() {
		System.out.println("Bark");
	}
}

public class Q98_InterfaceExample {

	public static void main(String[] args) {
		Dog dog = new Dog();
		dog.eat(); // Default method from the interface
		dog.sound(); // Implemented in the Dog class
	}

}
