package gts;

/**
 * DIfference between abstract class and interface write in java code
 * */
/**
 * 
 * 	Interface:
		Can only have abstract methods (unless default or static methods are used from Java 8 onwards).		
		Cannot have instance variables (fields are public static final constants).		
		Cannot have constructors.
		Methods are implicitly public and abstract (unless default or static methods).		
		A class can implement multiple interfaces (multiple inheritance).		
		Defines a contract that can be implemented by any class, regardless of the class hierarchy.		
		Cannot maintain state (no instance variables).		
		Interfaces cannot provide state but can provide default methods from Java 8 onwards.		
		Used to define a set of behaviors that different classes can implement.		
		A class can implement multiple interfaces, allowing it to inherit multiple behaviors.		
		Provides a way to achieve loose coupling between classes by defining behavior independently from implementation.
 * */
interface Animal {
	// Abstract method (implicitly public and abstract)
	void sound();

	default void eat() {
		System.out.println("This animal eats food.");
	}
}

// Concrete class that implements the interface
class Dog implements Animal {
	// Implementing the abstract method
	public void sound() {
		System.out.println("Bark");
	}
}

public class Q98_InterfaceExample {

	public static void main(String[] args) {
		Dog dog = new Dog();
		dog.eat(); // Default method from the interface
		dog.sound(); // Implemented in the Dog class
	}

}
